<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Azure Cosmos DB Repository-Pattern .NET SDK</title><link>https://ievangelist.github.io/azure-cosmos-dotnet-repository/</link><description>Recent content on Azure Cosmos DB Repository-Pattern .NET SDK</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://ievangelist.github.io/azure-cosmos-dotnet-repository/index.xml" rel="self" type="application/rss+xml"/><item><title>FullItem</title><link>https://ievangelist.github.io/azure-cosmos-dotnet-repository/3-item-types/full-item/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ievangelist.github.io/azure-cosmos-dotnet-repository/3-item-types/full-item/</guid><description>Full Item //TODO</description></item><item><title>ETagItem</title><link>https://ievangelist.github.io/azure-cosmos-dotnet-repository/3-item-types/etags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ievangelist.github.io/azure-cosmos-dotnet-repository/3-item-types/etags/</guid><description>Optimistic Concurrency Control with ETags The default repository now supports etags and will pass them when IItemWithEtag is implemented correctly or the base classes EtagItem or FullItem are used. The etag check is enforced on all updates when TItem is of the correct type. It can however be bypassed by setting the ignoreEtag optional parameter in the relevant async methods. The InMemory repository also supports OCC with Etags. The OptimisticCurrencyControl sample shows these features.</description></item><item><title>TimeStampedItem</title><link>https://ievangelist.github.io/azure-cosmos-dotnet-repository/3-item-types/time-stamps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ievangelist.github.io/azure-cosmos-dotnet-repository/3-item-types/time-stamps/</guid><description>Time Stamped Item The last updated value is retrieved from the _ts property that Cosmos DB sets; as documented here. This property is deserialised and is available in the raw seconds (LastUpdatedTimeRaw) since epoch and a human readable format (LastUpdatedTimeUtc). Both the base classes FullItem and TimeStampedItem contain these properties.
The CreatedTimeUtc time property available in both the base classes FullItem and TimeStampedItem is set when CreateAsync is called on the repository.</description></item><item><title>TimeToLiveItem</title><link>https://ievangelist.github.io/azure-cosmos-dotnet-repository/3-item-types/time-to-live/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ievangelist.github.io/azure-cosmos-dotnet-repository/3-item-types/time-to-live/</guid><description>Time To Live The time to live property can be set at both an item and container level. At a container level this can be done through the container options builder:
options.ContainerBuilder.Configure&amp;lt;BankAccount&amp;gt;( x =&amp;gt; x.WithContainerDefaultTimeToLive(TimeSpan.FromHours(2))); In the above example the container would have a default item lifespan of 2 hours. This can be overriden at the item level by using the TimeToLive property when correctly implemented. This is available through the FullItem and TimeToLiveItem base classes.</description></item></channel></rss>